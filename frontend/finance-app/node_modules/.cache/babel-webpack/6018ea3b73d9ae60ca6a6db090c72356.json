{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/kryst/Desktop/frontend/finance-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { TickerDetailResponseDto } from \"../dtos/responses/ticker-detail-response-dto\";\nimport { HttpErrorResponse, HttpHeaders } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class TickerService {\n  constructor(httpClient, router) {\n    this.httpClient = httpClient;\n    this.router = router;\n  }\n\n  getTickerDetails(ticker) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      const accessToken = (_a = localStorage.getItem('accessToken')) !== null && _a !== void 0 ? _a : '';\n      const header = new HttpHeaders({\n        'Authorization': `Bearer ${accessToken}`,\n        'isExpired': 'false'\n      });\n      const url = `http://localhost:8080/api/tickers/${ticker}/details`;\n      return yield _this.httpClient.get(url, {\n        headers: header\n      }).toPromise().then(response => response).catch(errors => {\n        if (errors instanceof HttpErrorResponse && errors.status === 401) {\n          alert(\"Your session is expired.\");\n\n          _this.router.navigate(['/', 'login']);\n        }\n\n        return new TickerDetailResponseDto();\n      });\n    })();\n  }\n\n  getTickerAggregation(ticker, multiplier, timespan, from, to) {\n    var _a;\n\n    const accessToken = (_a = localStorage.getItem('accessToken')) !== null && _a !== void 0 ? _a : '';\n    const header = new HttpHeaders({\n      'Authorization': `Bearer ${accessToken}`,\n      'isExpired': 'false'\n    });\n    const url = `http://localhost:8080/api/tickers/${ticker}/range/${multiplier}/${timespan}/${from}/${to}`;\n    return this.httpClient.get(url, {\n      headers: header\n    });\n  }\n\n}\n\nTickerService.ɵfac = function TickerService_Factory(t) {\n  return new (t || TickerService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n\nTickerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TickerService,\n  factory: TickerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:\\Users\\kryst\\Desktop\\frontend\\finance-app\\src\\app\\services\\ticker.service.ts"],"names":[],"mappings":";AACA,SAAQ,uBAAR,QAAsC,8CAAtC;AACA,SAAoB,iBAApB,EAAuC,WAAvC,QAAyD,sBAAzD;;;;AAQA,OAAM,MAAO,aAAP,CAAoB;AAExB,EAAA,WAAA,CAAoB,UAApB,EAAoD,MAApD,EAAkE;AAA9C,SAAA,UAAA,GAAA,UAAA;AAAgC,SAAA,MAAA,GAAA,MAAA;AACnD;;AAEK,EAAA,gBAAgB,CAAC,MAAD,EAAe;AAAA;;AAAA;;;AAEnC,YAAM,WAAW,GAAW,CAAA,EAAA,GAAA,YAAY,CAAC,OAAb,CAAqB,aAArB,CAAA,MAAmC,IAAnC,IAAmC,EAAA,KAAA,KAAA,CAAnC,GAAmC,EAAnC,GAAuC,EAAnE;AACA,YAAM,MAAM,GAAgB,IAAI,WAAJ,CAC1B;AACE,yBAAiB,UAAU,WAAW,EADxC;AAEE,qBAAa;AAFf,OAD0B,CAA5B;AAMA,YAAM,GAAG,GAAW,qCAAqC,MAAM,UAA/D;AAEA,mBAAa,KAAI,CAAC,UAAL,CACV,GADU,CACmB,GADnB,EACwB;AAAC,QAAA,OAAO,EAAE;AAAV,OADxB,EAEV,SAFU,GAGV,IAHU,CAGL,QAAQ,IAAI,QAHP,EAIV,KAJU,CAIJ,MAAM,IAAG;AAEd,YAAG,MAAM,YAAY,iBAAlB,IAAuC,MAAM,CAAC,MAAP,KAAkB,GAA5D,EAAgE;AAC9D,UAAA,KAAK,CAAC,0BAAD,CAAL;;AACA,UAAA,KAAI,CAAC,MAAL,CAAY,QAAZ,CAAqB,CAAC,GAAD,EAAM,OAAN,CAArB;AACD;;AAED,eAAO,IAAI,uBAAJ,EAAP;AACD,OAZU,CAAb;AAXmC;AAwBpC;;AAED,EAAA,oBAAoB,CAAC,MAAD,EAAiB,UAAjB,EAAqC,QAArC,EAAuD,IAAvD,EAAqE,EAArE,EAA+E;;;AAEjG,UAAM,WAAW,GAAW,CAAA,EAAA,GAAA,YAAY,CAAC,OAAb,CAAqB,aAArB,CAAA,MAAmC,IAAnC,IAAmC,EAAA,KAAA,KAAA,CAAnC,GAAmC,EAAnC,GAAuC,EAAnE;AACA,UAAM,MAAM,GAAgB,IAAI,WAAJ,CAC1B;AACE,uBAAiB,UAAU,WAAW,EADxC;AAEE,mBAAa;AAFf,KAD0B,CAA5B;AAMA,UAAM,GAAG,GAAW,qCAAqC,MAAM,UAAU,UAAU,IAAI,QAAQ,IAAI,IAAI,IAAI,EAAE,EAA7G;AAEA,WAAO,KAAK,UAAL,CAAgB,GAAhB,CAAkD,GAAlD,EAAuD;AAAC,MAAA,OAAO,EAAE;AAAV,KAAvD,CAAP;AAED;;AA5CuB;;;mBAAb,a,EAAa,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C,EAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,MAAA,C;AAAA,C;;;SAAb,a;AAAa,EAAA,OAAA,EAAb,aAAa,CAAA,I;AAAA,EAAA,UAAA,EAFZ","sourcesContent":["import {Injectable} from '@angular/core';\nimport {TickerDetailResponseDto} from \"../dtos/responses/ticker-detail-response-dto\";\nimport {HttpClient, HttpErrorResponse, HttpHeaders} from \"@angular/common/http\";\nimport {Router} from \"@angular/router\";\nimport {TickerAggregationResponseDto} from \"../dtos/responses/ticker-aggregation-response-dto\";\nimport {Observable} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TickerService {\n\n  constructor(private httpClient: HttpClient, private router: Router) {\n  }\n\n  async getTickerDetails(ticker: string): Promise<TickerDetailResponseDto> {\n\n    const accessToken: string = localStorage.getItem('accessToken') ?? '';\n    const header: HttpHeaders = new HttpHeaders(\n      {\n        'Authorization': `Bearer ${accessToken}`,\n        'isExpired': 'false'\n      }\n    );\n    const url: string = `http://localhost:8080/api/tickers/${ticker}/details`;\n\n    return await this.httpClient\n      .get<TickerDetailResponseDto>(url, {headers: header})\n      .toPromise()\n      .then(response => response)\n      .catch(errors => {\n\n        if(errors instanceof HttpErrorResponse && errors.status === 401){\n          alert(\"Your session is expired.\");\n          this.router.navigate(['/', 'login']);\n        }\n\n        return new TickerDetailResponseDto();\n      });\n  }\n\n  getTickerAggregation(ticker: string, multiplier: number, timespan: string, from: string, to: string): Observable<TickerAggregationResponseDto>{\n\n    const accessToken: string = localStorage.getItem('accessToken') ?? '';\n    const header: HttpHeaders = new HttpHeaders(\n      {\n        'Authorization': `Bearer ${accessToken}`,\n        'isExpired': 'false'\n      }\n    );\n    const url: string = `http://localhost:8080/api/tickers/${ticker}/range/${multiplier}/${timespan}/${from}/${to}`;\n\n    return this.httpClient.get<TickerAggregationResponseDto>(url, {headers: header})\n\n  }\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}